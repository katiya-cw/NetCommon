/****************************************Copyright (c)**************************************************
**                                      TXRFID
**                                    
**                                 http://www.txrfid.com
**
**--------------文件信息-------------------------------------------------------------------------
**文   件   名: MUR500USB.H  
**创   建   人: TXRFID
**创 建 日  期: 2009年1月5日
**描        述: 动态库头文件。
**
**-----------------修改记录--------------------------------------------------------------
** 修改内容:    1.
** 当前版本:    v1.00 
** 修 改 人:    TXRFID
** 修改日期:    2009年01月05日
** 注    意: 
**---------------------------------------------------------------------------------------

****************************************************************************************/
#ifndef __MUR500_OLD_H__
#define __MUR500_OLD_H__


#define MF1_S50                 0x04               
#define MF1_S70                 0x02
#define MF0_ULIGHT              0x44
#define MF1_LIGHT               0x10 

// PICC 命令
#define IDLE                    0x00
#define ALL                     0x01
#define ANTICOLLISION1          0x93       // anticollision level 1
#define ANTICOLLISION2          0x95       // anticollision level 2
#define ANTICOLLISION3          0x97       // anticollision level 3 
#define KEYA                    0x00       //密匙类型A
#define KEYB                    0x04       //密匙类型B
#define DECREMENT               0xC0
#define INCREMENT               0xC1
#define RESTORE                 0xC2

#define FALSE                   0
#define TRUE                    1
    
//定义数据块格式的位置
#define SEQNR                    0          //数据交换包的序号
#define COMMAND	                 1          //命令字符	
#define STATUS                   1          //状态字符
#define LENGTH                   2          //数据的长度		
#define DATA                     3          //数据字节

//mifare error
#define OK                      0          //函数调用成功
#define NO_TAG_ERR              -1          //在有效区域内没有卡
#define CRC_ERR                 -2          //从卡中接收到了错误的CRC校验和
#define EMPTY                   -3          //值溢出
#define AUTH_ERR                -4          //不能验证
#define PARITY_ERR              -5          //从卡中接收到了错误的校验位
#define CODE_ERR                -6          //通信错误


#define SERNR_ERR               -8          //在防冲突时读到了错误的串行码
#define KEY_ERR                 -9          //证实密码错*****
#define NOT_AUTH_ERR            -10         //卡没有验证
#define BIT_COUNT_ERR           -11         //从卡中接收到了错误数量的位
#define BYTE_COUNT_ERR          -12         //从卡中接收了错误数量的字节
#define TRANS_ERR               -14         //调用Transfer函数出错
#define WRITE_ERR               -15         //调用Write函数出错
#define INCR_ERR                -16         //调用Increment函数出错
#define DECR_ERR                -17         //调用Decrment函数出错
#define READ_ERR                -18         //调用Read函数出错
#define COLL_ERR                -24         //冲突错
#define ACCESS_TIMEOUT          -27         //访问超时
#define QUIT	                -30         //上一次了送命令时被打断
#define INVALID_PARA 31  // 无效参数
//check write Error
#define CHK_WR_OK               0          //Check Write正确
#define CHK_WR_FAILED           -1          //Check Write出错
#define CHK_WR_COMP_ERR         -2          //Check Write:写出错（比较出错）


#define COMM_ERR		255	//串行通信错误

#ifdef __cplusplus
	extern "C" { 
#endif


/*********************************************************************************************************
** 功能描述: 进行MUR500的USB初始化。
**
** 输　入:  无        
**
** 输　出:  无
**
** 函数返回: OK，QUIT，COMM_ERR
**          
********************************************************************************************************/
unsigned char  __stdcall MUR500USB_Init();

/*********************************************************************************************************
** 功能描述: 进行MUR500的复位。
**
** 输　入:  无        
**
** 输　出:  无
**
** 函数返回: OK，QUIT，COMM_ERR
**          
********************************************************************************************************/
unsigned char  __stdcall MUR500USB_Reset();

/*********************************************************************************************************
** 功能描述: 获取动态库版本号。
**
** 输　入:  无          
**
** 输　出:  版本号
**
** 函数返回: 
**          
********************************************************************************************************/
void __stdcall TX_Get_Dll_Ver(char *ver);

/*********************************************************************************************************
** 功能描述: 对模块进行初始化，初始化成功后，模块上的指示灯将点亮，此时天线发射载波信号，
**           任何进入天线感应区的卡可得电进入IDLE状态，可使用任一函数对卡进行操作。此时读卡芯片完全被激活，所消耗的电流最大。
**           模块上电后，模块内部会自动执行初始化，指示灯将点亮，因此上电后，用户可不用执行该函数，而直接进行其它操作。
**           该函数可用于不上电情况下的重新初始化。
**
** 输　入:  无          
**
** 输　出:  无
**
** 函数返回: OK，QUIT，COMM_ERR
**          
********************************************************************************************************/
unsigned char __stdcall TX_Config(void);

/*********************************************************************************************************
** 功能描述: 此函数将关闭TX模块，指示灯熄灭，天线不发送载波信号，模块消耗的电流最小，在此状态在，
**           模块不能使用。若要重新使用模块，需要调用TX_Config()函数对TX模块重新进行配置。
**
** 输　入:  无          
**
** 输　出:  无
**
** 函数返回: OK，COMM_ERR
********************************************************************************************************/
unsigned char __stdcall TX_Close(void);

/*********************************************************************************************************
** 功能描述: 获取mur500设备信息。
**
** 输　入:  无          
**
** 输　出:  模块的信息*Info，Info为保存信息空间的首地址。Info[0]～Info[4]为模块类型标识，
**          依次为0x30,0x88,0xf8,0x00,0xXX，Info[5]～Info[8]为读卡芯片的序列号，Info[9]为固件版本号，
**          高四位为版本号的整数，取值从1到15，低四位为版本号的小数，取值从0到9。
**
** 函数返回: OK，QUIT，COMM_ERR
**          
********************************************************************************************************/
unsigned char __stdcall TX_Get_Info(unsigned char *info);

/*********************************************************************************************************
** 功能描述: 此函数的作用是将指定的密码（*Key）装载到模块内指定的地方（Key_Sector），并非改变Mifare1 卡内扇区
**           的密码。本函数只对模块进行操作，模块与卡之间没有数据传输。
**           模块内有16 个密码区（区号0――15）, 称它为密钥区号Key_Sector。每个区分密钥A和密钥B两个，
**           总共32 个密码。装载成功后，可用该密钥对Mifare1 卡进行验证。
**           在M1卡中也有16个存储区，称它为扇区号Sector。若要改变Mifare1 卡内的密钥，可在用原密码验证通过后，
**           直接用写块数据TX_Write()函数，将密码块改写。Mifare卡出厂后的初始密钥为6个FFH，A和B密钥都一样。
**
** 输　入:  KeyAB:密钥类型（1字节）。可取值为0x00（KEYA）――密钥A，或0x04（KEYB）――密钥B
**          Key_Sector：密钥区号（1字节）：取值范围0～15
**          *Key：需要装载的密钥（6字节）
**                
** 输　出:  无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，AUTH_ERR，COMM_ERR
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
unsigned char __stdcall TX_Load_Key(unsigned char KeyAB,unsigned char Key_Sector,unsigned char *Key);

/*********************************************************************************************************
** 功能描述: 检查在TX模块有效范围内是否有卡存在。在选择一张新的卡时必须调用该函数。
**           卡片进入天线区域后，能获能能量，从而得电复位处于IDLE模块，TX_Request函数
**           可用ALL或IDLE任意一种模式进行请求，卡片均能响应，并返回卡片类型号TagType（2个字节）。
**           若对某一张卡成功进行了挂起操作（TX_Halt命令），卡片将进入Halt状态，此时的卡只能
**           响应ALL模式的请求，除非该卡离开天线区域然后再重新进入。
**           给TX模块发送0x41命令完成请求卡。
**           注意：对同一张卡（不进入HALT状态）连续进行请求时，总是一次成功一次失败
**
** 输　入: ReqMode：请求模式 ReqMode取值为1或0 
**                ReqMode＝0，请求天线范围内IDLE状态的卡（HALT状态的除外）
**                ReqMode＝1，请求天线范围内的所有卡
**
** 输　出: TagType：2个字节的卡片类型，*TagType低字节 *(TagType+1)高字节，
**                    对于mifare 1卡，返回类型为0x0004,则*TagType ＝ 0x04 ，*(TagType+1)＝0x00
**                    当发生错误时，不返回任何内容（Len=0）
//
//                +----+----+----+----+----+----+----+----+       +----+----+----+----+----+----+----+----+
//        MSByte  | b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |LSByte | b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
//                +----+----+----+----+----+----+----+----+       +----+----+----+----+----+----+----+----+
//                |                 RFU                   |       |                                       | 
//                                                                | UID size| RFU|   bit-frame anticoll   |
//                                                                |         |    |                        |
//                                                                | 00..std |    |  (if any bit set .. Y, | 
//                                                                | 01..dbl |    |             else .. N) |
//                                                                | 10..tpl |    |                        |
//Mifare 1 S50    |                 RFU                   |       |  0   0    0    0  | 0    1    0    0  |  = 0x0004   UID(唯一序列号）4字节 比特帧防冲突方式
//Mifare 1 S70    |                 RFU                   |       |  0   0    0    0  | 0    0    1    0  |  = 0x0002   UID(唯一序列号）4字节 比特帧防冲突方式
//Mifare UltraLight|                RFU                   |       |  0   1    0    0  | 0    1    0    0  |  = 0x0044   UID(唯一序列号）7字节 比特帧防冲突方式，需二层防碰撞
//Mifare Light    |                 RFU                   |       |  0   0    0    1  | 0    0    0    0  |  = 0x0010   UID(唯一序列号）4字节 比特帧防冲突方式
//SHC1101         |                 RFU                   |       |  0   0    0    0  | 0    1    0    0  |  = 0x0004   UID(唯一序列号）4字节 比特帧防冲突方式
//SHC1102         | 0    0    1    1  |  0    0    1    1 |       |  0   0    0    0  | 0    0    0    0  |  = 0x3300   UID(唯一序列号）4字节 非比特帧防冲突方式               
//11RF32          |                 RFU                   |       |  0   0    0    0  | 0    1    0    0  |  = 0x0004   UID(唯一序列号）4字节 比特帧防冲突方式
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，BIT_COUNT_ERR，COMM_ERR
**
********************************************************************************************************/
unsigned char __stdcall TX_Request(unsigned char ReqMode,unsigned short &tagtype);


/*********************************************************************************************************
** 功能描述: 可选级数的防碰撞操作。该函数必须在调用TX_Request命令后立即调用。当多个卡片位于天线区域时，
**           执行函数后，能得到序列号最大的那个卡片的序列号中的4个字节。
**           卡的序列号长度有三种：4字节、7字节和10字节。4字节的只要用一级防碰撞即可得到完整的序列号，
**           如Mifare1 S50 S70等；7字节的要进行二级防碰撞才能得到完整的序列号，前一级所得到的序列号的
**           最低字节为级联标志0x88，在序列号内只后3字节可用，后一级防碰撞能得到4字节序列号，两者按顺序
**           连接即为7字节序列号，如UltraLight和DesFire等；10字节的以此类推，但至今没有此类卡。
**           需要进行二级防碰撞操作，可通过修改参数Select_Code来实现。第一级使用Select_Code＝0x93，
**           第二级使用Select_Code＝0x95,对于现在所有得Mifare卡，不需要进行三级防碰撞，因为所有Mifare卡的序列号
**           最大为7个字节。当知道了所要选择卡的序列号后，就没有必要执行该TX_AntiColl函数。此时，调用TX_Request后，
**           直接调用TX_Select函数即可。
**           
** 输　入:  Select_Code：防碰撞层级编码：一层（ANTICOLL1）―0x93；二层（ANTICOLL2）―0x95；三层（ANTICOLL3）―0x97
	    Bcnt：预选卡已经知道的序列号的的位数，通常都设Bcnt=0 
**      
** 输　出: *SNR：4个字节的卡的序列号，低字节放在低地址处*SNR低字节 *(SNR+i)高字节
**                若卡的序列号超过4个字节（如Mifare UltraLight），序列号不完整，则最低字节
**                的值为0x88，表示需要进行更高一级的防碰撞（0x95）。
**
** 函数返回: TX模块执行该命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，BIT_COUNT_ERR，COMM_ERR
**
********************************************************************************************************/
unsigned char __stdcall TX_Casc_Anticoll(unsigned char bcnt,unsigned char code,
											  unsigned long &snr);
/*********************************************************************************************************
** 功能描述: 该函数选择某一个序列号的卡，与之建立通信连接，并返回是否选择成功的应答*Sak。
**           该函数一般与TX_Casc_Anticoll()配对使用，进行多级防碰撞后卡的选择。
**           参数Select_Code表示防碰撞的级数，应该与该函数执行前的TX_Casc_Anticoll()中的Select_Code相同.
**           在任意一个防碰撞函数成功执行后，或在任何时候当程序员想实际地与已知序列号的卡片进行通信时，
**           必须使用TX_Casc_Select或后面得TX_Select函数，以建立与所选卡的通信。
**           卡的序列号长度有三种：4字节、7字节和10字节。4字节的只要用一级选择即可,如Mifare1 S50 S70等；
**           7字节的要用二级选择才能完成，如UltraLight和DesFire等。如果需要进行二级选择，第一级选择输入
**           的序列号为，第一级防碰撞所得到的序列号,其中最低字节为级联标志0x88，只后3字节可用，第二级选
**           择输入得序列号为第二级防碰撞得到4字节序列号。
**           在程序中可用*Sak的bit2位来判断是否还有序列号未读出，如if(*SAK & 0x04){…}
**
** 输　入:  Select_Code：防碰撞层级编码：一层（ANTICOLL1）―0x93；二层（ANTICOLL2）―0x95；三层（ANTICOLL3）―0x97
**                        该参数应该与之前的Casc_Anticoll()中的Select_Code参数相同
**          *SNR：前一次防碰撞返回的卡的序号。无符号4字节，低字节放在低地址处 
**                 如果卡得序号号大于4个字节，则*SNR的最低字节值为0x88，表示需要进行更高一级的防碰撞
** 输　出: *Sak：是否选择成功的应答,其意义如下：
**
//                +----+----+----+----+----+----+----+----+
//       *Sak     | b7 | b6 | b5 | b4 | b3 | b2 | b1 | b0 |
//                +----+----+----+----+----+----+----+----+
//                |   RFU   |diff|   RFU   | ok |   RFU   | 
//Mifare 1 S50    |  0   0    0    0  |  1    0    0   0  |  = 0x08   
//Mifare 1 S70    |  0   0    0    1  |  1    0    0   0  |  = 0x18 
//Mifare UltraLight| 0   0    0    0  |  0    1    0   0  |  = 0x04 （第1次选择）
//Mifare Light    |  0   0    0    0  |  0    0    0   1  |  = 0x01 
//SHC1101         |  0   0    1    0  |  0    0    1   0  |  = 0x22 
//11RF32          |  0   0    0    0  |  1    0    0   0  |  = 0x08 
**
// bit2位用来判断是否还有序列号未读出，bit2＝0时，表示所有序列号输入完毕，选择成功，
// bit2＝1时表示序列号没有全部输入，选择没有完全成功，还要进行下一级的防碰撞和选择操作。
//	xxxxx1xx: 序号号没有完成，还要进行下一级的防碰撞和选择操作。
//	xx1xx0xx: 选择成功，该卡符合ISO/IEC 14443-4标准
//	xx0xx0xx: 选择成功，该卡不符合ISO/IEC 14443-4标准
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK, QUIT, NO_TAG_ERR, CRC_ERR, PARITY_ERR, BIT_COUNT_ERR,COMM_ERR
**
*********************************************************************************************************/
unsigned char __stdcall TX_Casc_Select(unsigned char Select_Code,unsigned long snr,unsigned char &sak);

/*********************************************************************************************************
** 功能描述: 使用模块内部密钥区中Key_Sector中的密码对指定的卡的扇区Sector进行验证，若卡Sector区中的密码与
**           存储在模块内Key_Sector中的密码相同，则验证成功，返回OK。与TX_Auth函数不同的是，该函数参数中同时
**           有Sector和Key_Sector，模块中的密钥区和卡中的扇区可以是交叉的关系。并且该函数可指定卡的Sector
**           和模块内部Key_Sector，因此Sector的取值范围为0～39，可用于S70卡的证实。
**           与TX_Auth一样，该函数也依赖与TX_Load_Key函数曾经成功执行过，因为模块内部密码区（Key_Sector）中的密码
**           要由TX_Load_Key函数事先装载。该函数适用于对于所有卡来说密码相同的应用，密钥的装载可以在一个安全的
**           场合一次性装入。
**
** 输　入: KeyAB：=KEYA(0x00),利用密钥A进行验证 
**                =KEYB(0x04),利用密钥B进行验证
**         Sector：所要验证的卡扇区号（也即将要访问的卡的扇区号），取值范围0～39，能用于S70卡
**         Key_Sector: 用于证实的模块内密匙区号，取值范围0～15。
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，PARITY_ERR，BIT_COUNT_ERR，COMM_ERR
**
********************************************************************************************************/
unsigned char __stdcall TX_Auth2(unsigned char KeyAB,unsigned char Sector,unsigned char Key_Sector);



/*********************************************************************************************************
** 功能描述: 对卡进行验证;在对卡进行读、写、加、减等操作前，必须对卡进行验证。
**           若卡中的密钥与所传输的密码相匹配。则证实成功，函数将返回OK。
**           用于验证的密钥位于*Key指针指向的6个字节存储区内，本函数执行时不对密钥区进行操作，因此被称为直接密码证实。
**           直接密码证实一般用于对每一张卡来说密钥都不同的应用，如在使用安全模块（PSAM卡）的消费应用中，
**           消费机首先将卡的序列号读出，然后与PSAM卡中消费主密钥一起生成导出密钥，然后直接用导出密钥与卡的一个应用扇区相互证实。
**
** 输　入: KeyAB：=KEYA(0x00),利用密钥A进行验证 
**                =KEYB(0x04),利用密钥B进行验证
**         Key:   用于证实的密码首址,应在外部定义一个共6个字节的数组用于存放密码。
**         Sector：所要验证的卡扇区号（也即将要访问的卡的扇区号），取值范围0～39，能用于S70卡
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，AUTH_ERR, PARITY_ERR，BIT_COUNT_ERR，COMM_ERR
**
********************************************************************************************************/
unsigned char __stdcall TX_Auth_Key(unsigned char KeyAB,unsigned char *key,unsigned char Sector);


/*********************************************************************************************************
** 功能描述: 此函数将参数中的密码与shc1102卡中密码块的密码进行比较，若密码匹配则函数返回MI_OK。
**
** 输　入: KeyBlock：密钥块地址，对于SHC1102为8。
           Key：用于证实的密码首地址，,应在外部定义一个共4个字节的数组用于存放密码

** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，AUTH_ERR, PARITY_ERR，BIT_COUNT_ERR，COMM_ERR
**
********************************************************************************************************/
unsigned char __stdcall TX_Shc1102_Auth(unsigned char keyblock,unsigned char *key);

/*********************************************************************************************************
** 功能描述: 在验证成功后，使用该函数读Mifare卡中相应块的数据。Mifare卡中一个块的数据是16字节，因此读写
**           一次均是16个字节。所读块号必须与之前所验证的块号在同一个扇区内，mifare1卡从块号0开始按顺序
**           每4个块1个扇区。
**           因为Mifare卡每个扇区的密码可能不相同，若要对一张卡中的多个扇区进行操作，在对某一扇区操作
**           完毕后，必须进行一条读命令才能对另一个扇区直接进行验证命令，否则必须从请求开始操作。
**           密码数据不能被读取。                   
**
** 输　入: Block：卡块号（1字节）：	S50：0～63；S70：0～255
**
** 输　出: *Data：Data为读回16字节数据的首地址
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Read_Enc(unsigned char Block,unsigned char *data);

/*********************************************************************************************************
** 功能描述: 读SHC1102卡中相应块的数据。                   
**
** 输　入: Block：卡块号（1字节）
**
** 输　出: *Data：Data为读回4字节数据的首地址。
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Shc1102_Read(unsigned char block,unsigned char* data);

/*********************************************************************************************************
** 功能描述: 读mifare light卡中相应块的数据。                   
**
** 输　入: Block：卡块号（1字节）
**
** 输　出: *Data：Data为读回4字节数据的首地址。
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_ML_Read(unsigned char Block,unsigned char *data);

/*********************************************************************************************************
** 功能描述:读出卡内某一块值块。
**
** 输　入:  
   Block--卡块号（1字节）：			S50：1~63
									S70：1~255 
**                
** 输　出:  value：为读回4字节数据。
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK, MI_WRONG_VALUE, NO_TAG_ERR, BIT_COUNT_ERR, TRANS_ERR, CODE_ERR, COMM_RERR
**           
********************************************************************************************************/
unsigned char __stdcall TX_Read_Val(unsigned char Block,long &value);


/*********************************************************************************************************
** 功能描述: 对卡内某一块进行验证成功后，即可对同一扇区的各个块进行写操作（只要访问条件允许），
**           其中包括位于扇区尾的密码块，这是更改密码的唯一方法。。                   
**
** 输　入: Block：卡块号（1字节）：	S50：1～63；S70：1～255  第0块不能写
**         *Data：16字节数据指针，Data为写入的16字节数据的首地址
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Write_Enc(unsigned char Block,unsigned char *data);




/*********************************************************************************************************
** 功能描述: 对UltraLight卡写入一个4字节的数据。此命令只对UltraLight有效。对UltraLight进行读操作与mifare1一样。                   
**           
** 输　入: Block：卡块号（1字节）：1～15 第0块不能写
**         *Data：4字节数据指针，Data为写入的4字节数据的首地址
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
*********************************************************************************************************/
unsigned char __stdcall TX_ULwrite_Enc(unsigned char Block,unsigned char *Data);


/*********************************************************************************************************
** 功能描述: 往SHC1102指定块写入四字节数据。                   
**
** 输　入: Block：卡块号（1字节）	
**         *Data：4字节数据指针，Data为写入的4字节数据的首地址
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Shc1102_Write(unsigned char Block,unsigned char* data);

/*********************************************************************************************************
** 功能描述: 往Mifare light指定块写入四字节数据。                   
**
** 输　入: Block：卡块号（1字节）	
**         *Data：4字节数据指针，Data为写入的4字节数据的首地址
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，NO_TAG_ERR，CRC_ERR，NOT_AUTH_ERR，PARITY_ERR，BIT_COUNT_ERR，
**           COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_ML_Write(unsigned char Block,unsigned char *data);
/*********************************************************************************************************
** 功能描述: 往Mifare卡中相应块写入值块格式的数据。
**
** 输　入: 
Block--卡块号（1字节）：			S50：1~63
									S70：1~255
Value：     用来存储减少值或增加值，当进行恢复操作时，该值为空值。Value是减少值或增加值 
**                
** 输　出:  无。
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK, QUIT, NO_TAG_ERR, BIT_COUNT_ERR, TRANS_ERR, CODE_ERR, COMM_RERR
**           
********************************************************************************************************/
unsigned char __stdcall TX_Write_Val(unsigned char Block,long value);


/*********************************************************************************************************
** 功能描述: 此函数用于执行TX_Write函数将数据写入卡后的数据正确性检查。该函数将重新进行
**           TX_Request－TX_Select－TX_Auth操作。TX_Auth验证密匙时所用的密匙区与块Block所在的扇区号相同。
**           此函数进行将所给出的数据（*Data）与相应Block地址的数据进行比较。如果正确，则返回
**           CHK_WR_OK信息。如果两者间数据不相符，则返回CHK_WR_COMP_ERR信息。发生其它任何错误时，
**           返回CHK_WR_FAILED信息。  
**         
** 输　入: SNR：  所要检查的卡的序号
**         KeyAB：上一次写命令时的验证模式，KeyAB：密钥类型（1字节）。
**                可取值为KeyAB＝0x00（KEYA），利用密钥A进行验证，或KeyAB＝0x04（KEYB），利用密钥B进行验证密钥B。
**         Block：所要检查的数据块的地址，S50：0～63；S70：0～255
**         *Data：16字节数据指针， Data为用于对比上次所写的16字节数据的的首地址
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：QUIT，CHK_WR_OK，CHK_WR_FAILED，CHK_WR_COMP_ERR，COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Check_Write(unsigned char snr,unsigned char KeyAB,unsigned char Block,unsigned char *data);

/*********************************************************************************************************
** 功能描述: 此函数对卡内的某一块进行加、减或数据备份，该块必须为值块格式，并支持自动传送。
**           该函数其实是TX_Increment、TX_Decrement或TX_Restore函数与TX_Transfer函数的组合。因此可以用
**           该函数替换上述函数。若卡块号与传输块号相同，则将操作后的结果写入原来的块内；
**           若卡块号与传输块号不相同，则将操作后的结果写入传输块内，结果传输块内的数据被覆盖，
**           原块内的值不变。当模式为“恢复”时，“值”无意义。     
**  
** 输　入: ValueMode：0xC0―减； 0xC1―加； 0xC2―恢复
**         Block：卡内块地址，对该块进行值操作，取值范围：S50：0～63；S70：0～255
**         Value：4字节数据，用来存储减少值或增加值，当进行恢复操作时，该值为空值。
**                 Value是减少值或增加值存放的首地址，存放时，低地址存放高字节。
**         Trans_Block：传输块地址，取值范围：S50：0～63；S70：0～255。
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK, QUIT, NO_TAG_ERR, BIT_COUNT_ERR, TRANS_ERR, CODE_ERR, COMM_RERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Value(unsigned char ValueMode,unsigned char Block,long &value,unsigned char Trans_Block);



/*********************************************************************************************************
** 功能描述: 将天线区所选择卡置为挂起状态。如果要进行重新选择，则应用ALL模式调用TX_Request命令。
**           如果要进行重新选择,也可以将卡离开天线操作区再进入，或执行复位函数TX_Reset()。
**           可以配合使用TX_Request()和TX_Halt()函数，进行一次性扣费，如卡进入感应区后只扣一次（一元钱），
**           离开后，下次进入再扣一次，若卡在感应区内停留时间较长，也不会扣多一次。
**
** 输　入: 无
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，COMM_ERR
**
********************************************************************************************************/
unsigned char __stdcall TX_Halt(void);


/*********************************************************************************************************
** 功能描述: 该函数使模块上的射频电路关闭，关闭的时间由参数Msec指定，若Msec=0，射频电路将一直处于关闭状态，
**            一直到下一个TX_Request命令到来。关闭射频电路能使天线内的所有卡复位。
**  
** 输　入: Msec：取值0~255，模块上射频电路关闭时间（以ms毫秒为单位），Msec＝0时，一直关闭。 
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，COMM_ERR中的某一个。
**
*******************************************************************************************************/
unsigned char __stdcall TX_Reset(unsigned char msec);


/*********************************************************************************************************
** 功能描述: 此函数将模块内EEPROM的数据读出。         
**  
** 输　入: Adr：   被读模块内EEPROM首址，必须小于0x80
**         Length：被读数据长度
**         *Data： 数据指针，Data为读出数据缓冲区的首址。
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，CRC_ERR，BIT_COUNT_ERR，COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Read_E2(unsigned char addr,unsigned char length,unsigned char *data);


/*********************************************************************************************************
** 功能描述: 此函数将数据写入模块内EEPROM中。模块内EEPROM的0x00―0x0F为只读产品信息区，0x10―0x2F
**           为启动寄存器初始化文件区，最好不要改写，0x80―0x1FF为只读密钥区，可用TX_Load_Key写入。
**           0x7F为模块波特率参数存贮区，最好不要改写。         
**  
** 输　入: Adr：   被写入模块内EEPROM首址，取值范围（0x30―0x7E）
**         Length：被写数据长度
**         *Data： 数据指针，Data为写入数据缓冲区的首址。
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，CRC_ERR，BIT_COUNT_ERR，COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Write_E2(unsigned char addr,unsigned char length,unsigned char *data);




/*********************************************************************************************************
** 功能描述: 此函数设置绿灯熄灭。
**  
** 输　入: 无 
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Green_Off();

/*********************************************************************************************************
** 功能描述: 此函数设置绿灯亮
**  
** 输　入: 无 
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，QUIT，COMM_ERR中的某一个。
**
********************************************************************************************************/
unsigned char __stdcall TX_Green_On();


/*********************************************************************************************************
** 功能描述: 此函数输出一方波用于驱动蜂鸣器、绿灯，驱动的频率、持续时间、间隙时间和重复次数可设定。
**
** 输　入: Control:	 控制字，Control = 0x01时，控制对象为蜂鸣器，Control = 0x02时，控制对象为绿灯，
           Control = 0x03时，绿灯和蜂鸣器同时控制。。 
**             
**         OpenTime:	 方波输出持续时间，取值（0～255），10ms的分辨率
**         CloseTime:	 间隙时间，取值（0～255），10ms的分辨率
**         RepCnt:	 重复次数
**
** 输　出: 无
**
** 函数返回: TX模块执行命令后的状态
**           可能的状态值如下：OK，COMM_ERR中的某一个。
**
*******************************************************************************************************/
unsigned char __stdcall TX_Alarm(unsigned char contrl,unsigned char opentm,unsigned char closetm,unsigned char repcnt);




/***************************************************************************/
/***************************************************************************/


///////////////////////////////////////////////////////////////////////////////
#ifdef __cplusplus
  }
#endif

#endif  